
@Repository
public class MerchantProductDao {
@Autowired
private EntityManager manager;


public Merchant saveMerchant(Merchant merchant) {
	EntityTransaction transaction = manager.getTransaction();
	manager.persist(merchant);
	transaction.begin();
	transaction.commit();
	return merchant;
}

public Merchant updateMerchant (Merchant merchant) {
	EntityTransaction transaction = manager.getTransaction();
	Merchant dbMerchant=manager.find(Merchant.class, merchant.getId());
	if(dbMerchant!=null)
	{
		System.out.println("enter id,name,email,phone,password to update");
		dbMerchant.setId(merchant.getId());
		dbMerchant.setName(merchant.getName());
		dbMerchant.setEmail(merchant.getEmail());
		dbMerchant.setPhone(merchant.getPhone());
		dbMerchant.setPassword(merchant.getPassword());
		transaction.begin(); 
		transaction.commit();  
		return dbMerchant;
	}
	return null;
}

public Merchant findbyid(int id) {
	return manager.find(Merchant.class, id);
}

public Merchant verifyuser(long phone,String password) {
	Query q=manager.createQuery("select m from Merchant m where m.phone=?1 and m.password=?2");
	q.setParameter(1,phone);
	q.setParameter(2,password);
	try {
		return (Merchant)q.getSingleResult();
	} catch (Exception e) {
		return null;
	}
}

public Merchant verifyuser(String email,String password) {
	Query q=manager.createQuery("select m from Merchant m where m.email=?1 and m.password=?2");
	q.setParameter(1,email);
	q.setParameter(2,password);
	try {
		return (Merchant)q.getSingleResult();
	} catch (Exception e) {
		return null;
	}
}
public Product saveProduct(Product product, int merchant_id) {
	Merchant m=manager.find(Merchant.class,merchant_id);
	if(m!=null) {
		m.getProduct().add(product);
		product.setMerch(m);
		EntityTransaction transaction=manager.getTransaction();
		manager.persist(product);
		transaction.begin();
		transaction.commit();
		return product;
	}
	else {
		return null;
	}
}

public Product updateProduct(Product product,int merchant_id) {
	Merchant m=manager.find(Merchant.class,merchant_id);
	if(m!=null) {
		m.getProduct().add(product);
		product.setMerch(m);
		EntityTransaction transaction=manager.getTransaction();
		manager.merge(product);
		transaction.begin();
		transaction.commit();
		return product;
	}
	else {
		return null;
	}
}

public Product findbyId(int id) {
	return manager.find(Product.class, id);
}

public boolean deleteproduct(int id) {
	Merchant  m = findbyid(id);
	if (m != null) {
		EntityTransaction transaction = manager.getTransaction();
		manager.remove(m);
		transaction.begin();
		transaction.commit();
		return true;
	}
	return false;
}

public List<Product> findproductbymerchantid(int merchant_id){
	Query q=manager.createQuery("select p from Product p where p.merch.id=?1");
	q.setParameter(1,merchant_id);
	return q.getResultList();
}

public List<Product> findproductbycatagory(String catagory){
	Query q=manager.createQuery("select p from Product p where p.catagory=?1");
	q.setParameter(1,catagory);
	return q.getResultList();
}


public List<Product> findproductbybrand(String brand){
	Query q=manager.createQuery("select p from Product p where p.brand=?1");
	q.setParameter(1,brand);
	return q.getResultList();
}

public List<String> getProducts() {
	Query q = manager.createQuery("select p.name from Product p");
	return q.getResultList();
}
}
